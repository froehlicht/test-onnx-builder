name: Test ONNX Runtime Builder
on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  test-onnx-builder:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Clone ORT Builder
      run: |
        git clone https://github.com/olilarkin/ort-builder.git ort-builder
        cd ort-builder
        echo "=== Repository Structure ==="
        ls -la
    
    - name: Replace build-mac.sh with our fixed version
      run: |
        cd ort-builder
        echo "=== Replacing build-mac.sh with fixed version ==="
        # Backup original
        cp build-mac.sh build-mac.sh.original
        # Copy our fixed version from the main repo
        cp ../build-mac.sh ./build-mac.sh
        chmod +x build-mac.sh
        echo "‚úÖ Fixed build-mac.sh copied and made executable"
        
        # Show that our version is being used
        echo "=== Verifying our fixed version is in place ==="
        head -20 build-mac.sh
        echo "..."
        echo "Script contains $(wc -l < build-mac.sh) lines"
    
    - name: Checkout ONNX Runtime submodule
      run: |
        cd ort-builder
        # Fix SSH to HTTPS for submodules
        if [ -f ".gitmodules" ]; then
          sed -i '' 's/git@github.com:/https:\/\/github.com\//' .gitmodules
        fi
        # Step 1 from docs: Checkout ONNX Runtime submodule
        git submodule update --init
        echo "‚úÖ ONNX Runtime submodule checked out"
    
    - name: Fix Eigen hash validation issue
      run: |
        cd ort-builder/onnxruntime
        # Find and fix the Eigen hash validation issue
        if [ -f "cmake/external/eigen.cmake" ]; then
          echo "=== Fixing Eigen hash validation ==="
          # Remove hash validation for Eigen
          sed -i '' 's/URL_HASH SHA1=${DEP_SHA1_eigen}/# URL_HASH SHA1=${DEP_SHA1_eigen}/' cmake/external/eigen.cmake
          echo "‚úÖ Eigen hash validation disabled"
        fi
        
        # Alternative: Update the hash to the current one
        if [ -f "cmake/deps.txt" ]; then
          echo "=== Updating Eigen hash in deps.txt ==="
          # Replace the old hash with the current one
          sed -i '' 's/be8be39fdbc6e60e94fa7870b280707069b5b81a/32b145f525a8308d7ab1c09388b2e288312d8eba/' cmake/deps.txt
          echo "‚úÖ Eigen hash updated in deps.txt"
        fi
    
    - name: Create virtual environment and install dependencies
      run: |
        cd ort-builder
        # Step 2 from docs: Create a virtual environment and activate it (mac/linux)
        python3 -m venv venv
        source venv/bin/activate
        # Step 3 from docs: Install dependencies
        pip install -r requirements.txt
        pip list
        echo "‚úÖ Virtual environment and dependencies ready"
    
    - name: Setup model
      run: |
        cd ort-builder
        if [ -f "../best.onnx" ]; then
          cp ../best.onnx ./model.onnx
          echo "‚úÖ Model copied: model.onnx"
          echo "Model size: $(ls -lh model.onnx | awk '{print $5}')"
        else
          echo "‚ùå No best.onnx found in parent directory"
          ls -la ../
          exit 1
        fi
    
    - name: Convert model to ORT format
      run: |
        cd ort-builder
        source venv/bin/activate
        chmod +x convert-model-to-ort.sh
        # Step 4 from docs: Run ./convert-model-to-ort.sh model.onnx
        ./convert-model-to-ort.sh model.onnx
        
        echo "=== Conversion Results ==="
        ls -la model.* 2>/dev/null || echo "No model files found"
        
        # Check expected outputs from docs
        if [ -f "model.ort" ]; then
          echo "‚úÖ .ort file created: $(ls -lh model.ort | awk '{print $5}')"
        fi
        if [ -f "model.required_operators_and_types.config" ]; then
          echo "‚úÖ .config file created: $(ls -lh model.required_operators_and_types.config | awk '{print $5}')"
        fi
        if [ -f "model_ort.cpp" ]; then
          echo "‚úÖ C++ source code created: $(ls -lh model_ort.cpp | awk '{print $5}')"
        fi
        if [ -f "model_ort.h" ]; then
          echo "‚úÖ C++ header created: $(ls -lh model_ort.h | awk '{print $5}')"
        fi
    
    - name: Build customized ONNX Runtime static libraries with FIXED script
      timeout-minutes: 90
      run: |
        cd ort-builder
        source venv/bin/activate
        echo "=== Starting macOS build with FIXED script (this may take 45-90 minutes) ==="
        echo "Using our enhanced build script with ONNX library fixes"
        echo "=== Running FIXED build script ==="
        ./build-mac.sh
        
        echo "=== Build completed ==="
    
    - name: Test ONNX Runtime Library Symbols  
      run: |
        cd ort-builder
        echo "=== Testing ONNX Runtime Library Symbols ==="
        
        LIBRARY_PATH=""
        if [ -f "build/Mac/libonnxruntime_static.a" ]; then
          LIBRARY_PATH="build/Mac/libonnxruntime_static.a"
        elif [ -f "libs/macos-arm64_x86_64/libonnxruntime.a" ]; then
          LIBRARY_PATH="libs/macos-arm64_x86_64/libonnxruntime.a"
        else
          echo "‚ùå No ONNX Runtime library found for testing"
          exit 1
        fi
        
        echo "Testing library: $LIBRARY_PATH"
        
        # 1. Check architectures
        echo "=== Architecture Check ==="
        lipo -info "$LIBRARY_PATH"
        lipo -detailed_info "$LIBRARY_PATH"
        
        # 2. Check for critical ONNX symbols that were missing
        echo "=== Critical Symbol Check ==="
        MISSING_SYMBOLS=()
        
        # Test for the specific missing symbol
        if nm "$LIBRARY_PATH" 2>/dev/null | grep -q "propagateElemTypeFromInputToOutput"; then
          echo "‚úÖ propagateElemTypeFromInputToOutput: FOUND"
        else
          echo "‚ùå propagateElemTypeFromInputToOutput: MISSING"
          MISSING_SYMBOLS+=("propagateElemTypeFromInputToOutput")
        fi
        
        # Test for other ONNX core symbols
        if nm "$LIBRARY_PATH" 2>/dev/null | grep -q "onnx::"; then
          echo "‚úÖ ONNX namespace symbols: FOUND"
          echo "Sample ONNX symbols:"
          nm "$LIBRARY_PATH" 2>/dev/null | grep "onnx::" | head -5
        else
          echo "‚ùå ONNX namespace symbols: MISSING"
          MISSING_SYMBOLS+=("onnx_namespace")
        fi
        
        # 3. Final Report
        echo "=== FINAL LIBRARY TEST REPORT ==="
        if [ ${#MISSING_SYMBOLS[@]} -eq 0 ]; then
          echo "üéâ ALL CRITICAL SYMBOLS FOUND - Library should work!"
          echo "Library size: $(ls -lh "$LIBRARY_PATH" | awk '{print $5}')"
        else
          echo "‚ö†Ô∏è  MISSING SYMBOLS DETECTED:"
          printf '%s\n' "${MISSING_SYMBOLS[@]}"  
          echo ""
          echo "This library may cause linking errors!"
        fi
        
        # Export symbol list for debugging
        nm "$LIBRARY_PATH" > symbols_list.txt 2>/dev/null || echo "Could not export symbols"
        echo "Symbol list exported to symbols_list.txt"
    
    - name: Extract and organize build artifacts
      run: |
        cd ort-builder
        echo "=== Organizing build artifacts ==="
        
        # Create expected directory structure
        mkdir -p build/Mac
        
        # Check for the final universal binary
        if [ -f "libs/macos-arm64_x86_64/libonnxruntime.a" ]; then
          # Copy to expected location for upload
          cp "libs/macos-arm64_x86_64/libonnxruntime.a" "build/Mac/libonnxruntime_static.a"
          echo "‚úÖ Universal binary copied to build/Mac/libonnxruntime_static.a"
          echo "Library size: $(ls -lh build/Mac/libonnxruntime_static.a | awk '{print $5}')"
          
          # Show architecture info
          echo "=== Architecture Information ==="
          lipo -info build/Mac/libonnxruntime_static.a
        else
          echo "‚ùå Universal binary not found at libs/macos-arm64_x86_64/libonnxruntime.a"
        fi
        
        # Also copy the libs directory structure for reference
        if [ -d "libs" ]; then
          echo "=== Copying libs directory ==="
          cp -r libs build/Mac/
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ort-builder-artifacts-${{ github.run_number }}
        path: |
          ort-builder/build/Mac/*.a
          ort-builder/build/Mac/libs/**
          ort-builder/libs/**
          ort-builder/model.ort
          ort-builder/model.required_operators_and_types.config
          ort-builder/model_ort.cpp
          ort-builder/model_ort.h
          ort-builder/symbols_list.txt
        retention-days: 7
    
    - name: Build Summary
      if: always()
      run: |
        cd ort-builder
        echo "=== ONNX Runtime Builder Complete Summary ==="
        echo ""
        echo "üîß Build Script:"
        echo "  ‚úÖ Used FIXED build-mac.sh with ONNX library enhancements"
        echo ""
        echo "üìÅ Model Conversion:"
        [ -f "model.ort" ] && echo "  ‚úÖ ORT format: SUCCESS" || echo "  ‚ùå ORT format: FAILED"
        [ -f "model.required_operators_and_types.config" ] && echo "  ‚úÖ Config file: SUCCESS" || echo "  ‚ùå Config file: FAILED"
        [ -f "model_ort.cpp" ] && echo "  ‚úÖ C++ serialization: SUCCESS" || echo "  ‚ùå C++ serialization: FAILED"
        
        echo ""
        echo "üî® Static Library Build:"
        [ -f "build/Mac/libonnxruntime_static.a" ] && echo "  ‚úÖ Universal Binary: SUCCESS" || echo "  ‚ùå Universal Binary: FAILED"
        [ -f "libs/macos-arm64_x86_64/libonnxruntime.a" ] && echo "  ‚úÖ Original Universal: SUCCESS" || echo "  ‚ùå Original Universal: FAILED"
        
        echo ""
        echo "üîç Symbol Verification:"
        if [ -f "symbols_list.txt" ]; then
          if grep -q "propagateElemTypeFromInputToOutput" symbols_list.txt; then
            echo "  ‚úÖ Critical Symbol: FOUND"
          else
            echo "  ‚ùå Critical Symbol: MISSING"
          fi
          ONNX_COUNT=$(grep -c "onnx::" symbols_list.txt || echo "0")
          echo "  üìä ONNX Symbols Count: $ONNX_COUNT"
        else
          echo "  ‚ùå Symbol analysis: FAILED"
        fi
