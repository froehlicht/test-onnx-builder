name: Test ONNX Runtime Builder
on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  test-onnx-builder:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Clone ORT Builder
      run: |
        git clone https://github.com/olilarkin/ort-builder.git ort-builder
        cd ort-builder
        echo "=== Repository Structure ==="
        ls -la
    
    - name: Checkout ONNX Runtime submodule
      run: |
        cd ort-builder
        # Fix SSH to HTTPS for submodules
        if [ -f ".gitmodules" ]; then
          sed -i '' 's/git@github.com:/https:\/\/github.com\//' .gitmodules
        fi
        # Step 1 from docs: Checkout ONNX Runtime submodule
        git submodule update --init
        echo "✅ ONNX Runtime submodule checked out"
    
    - name: Fix Eigen hash validation issue
      run: |
        cd ort-builder/onnxruntime
        # Find and fix the Eigen hash validation issue
        if [ -f "cmake/external/eigen.cmake" ]; then
          echo "=== Fixing Eigen hash validation ==="
          # Remove hash validation for Eigen
          sed -i '' 's/URL_HASH SHA1=${DEP_SHA1_eigen}/# URL_HASH SHA1=${DEP_SHA1_eigen}/' cmake/external/eigen.cmake
          echo "✅ Eigen hash validation disabled"
        fi
        
        # Alternative: Update the hash to the current one
        if [ -f "cmake/deps.txt" ]; then
          echo "=== Updating Eigen hash in deps.txt ==="
          # Replace the old hash with the current one
          sed -i '' 's/be8be39fdbc6e60e94fa7870b280707069b5b81a/32b145f525a8308d7ab1c09388b2e288312d8eba/' cmake/deps.txt
          echo "✅ Eigen hash updated in deps.txt"
        fi
    
    - name: Create virtual environment and install dependencies
      run: |
        cd ort-builder
        # Step 2 from docs: Create a virtual environment and activate it (mac/linux)
        python3 -m venv venv
        source venv/bin/activate
        # Step 3 from docs: Install dependencies
        pip install -r requirements.txt
        pip list
        echo "✅ Virtual environment and dependencies ready"
    
    - name: Setup model
      run: |
        cd ort-builder
        if [ -f "../best.onnx" ]; then
          cp ../best.onnx ./model.onnx
          echo "✅ Model copied: model.onnx"
          echo "Model size: $(ls -lh model.onnx | awk '{print $5}')"
        else
          echo "❌ No best.onnx found in parent directory"
          ls -la ../
          exit 1
        fi
    
    - name: Convert model to ORT format
      run: |
        cd ort-builder
        source venv/bin/activate
        chmod +x convert-model-to-ort.sh
        # Step 4 from docs: Run ./convert-model-to-ort.sh model.onnx
        ./convert-model-to-ort.sh model.onnx
        
        echo "=== Conversion Results ==="
        ls -la model.* 2>/dev/null || echo "No model files found"
        
        # Check expected outputs from docs
        if [ -f "model.ort" ]; then
          echo "✅ .ort file created: $(ls -lh model.ort | awk '{print $5}')"
        fi
        if [ -f "model.required_operators_and_types.config" ]; then
          echo "✅ .config file created: $(ls -lh model.required_operators_and_types.config | awk '{print $5}')"
        fi
        if [ -f "model_ort.cpp" ]; then
          echo "✅ C++ source code created: $(ls -lh model_ort.cpp | awk '{print $5}')"
        fi
        if [ -f "model_ort.h" ]; then
          echo "✅ C++ header created: $(ls -lh model_ort.h | awk '{print $5}')"
        fi
    
    - name: Build customized ONNX Runtime static libraries
      timeout-minutes: 90
      run: |
        cd ort-builder
        source venv/bin/activate
        chmod +x build-mac.sh
        # Step 5 from docs: Build customized onnx runtime static libraries
        echo "=== Starting macOS build (this may take 45-90 minutes) ==="
        ./build-mac.sh
        
        echo "=== Build completed ==="
    
    - name: Extract and organize build artifacts
      run: |
        cd ort-builder
        echo "=== Organizing build artifacts ==="
        
        # Create expected directory structure
        mkdir -p build/Mac
        
        # Das build-mac.sh Script erstellt folgende Dateien:
        # 1. onnxruntime-macOS_x86_64-static-combined.a (temporär, wird gelöscht)
        # 2. onnxruntime-macOS_arm64-static-combined.a (temporär, wird gelöscht)  
        # 3. libs/macos-arm64_x86_64/libonnxruntime.a (finale Universal Binary)
        
        # Check for the final universal binary
        if [ -f "libs/macos-arm64_x86_64/libonnxruntime.a" ]; then
          # Copy to expected location for upload
          cp "libs/macos-arm64_x86_64/libonnxruntime.a" "build/Mac/libonnxruntime_static.a"
          echo "✅ Universal binary copied to build/Mac/libonnxruntime_static.a"
          echo "Library size: $(ls -lh build/Mac/libonnxruntime_static.a | awk '{print $5}')"
          
          # Show architecture info
          echo "=== Architecture Information ==="
          lipo -info build/Mac/libonnxruntime_static.a
          lipo -detailed_info build/Mac/libonnxruntime_static.a
        else
          echo "❌ Universal binary not found at libs/macos-arm64_x86_64/libonnxruntime.a"
          
          # Fallback: Check for individual arch builds
          echo "=== Checking for individual architecture builds ==="
          
          # Check ARM64 build
          if [ -f "onnxruntime-macOS_arm64-static-combined.a" ]; then
            echo "✅ Found ARM64 build: onnxruntime-macOS_arm64-static-combined.a"
            cp "onnxruntime-macOS_arm64-static-combined.a" "build/Mac/libonnxruntime_arm64_static.a"
            echo "ARM64 Library size: $(ls -lh onnxruntime-macOS_arm64-static-combined.a | awk '{print $5}')"
          fi
          
          # Check x86_64 build  
          if [ -f "onnxruntime-macOS_x86_64-static-combined.a" ]; then
            echo "✅ Found x86_64 build: onnxruntime-macOS_x86_64-static-combined.a"
            cp "onnxruntime-macOS_x86_64-static-combined.a" "build/Mac/libonnxruntime_x86_64_static.a"
            echo "x86_64 Library size: $(ls -lh onnxruntime-macOS_x86_64-static-combined.a | awk '{print $5}')"
          fi
          
          # Check individual build directories
          for arch in x86_64 arm64; do
            build_dir="onnxruntime/build/macOS_${arch}/MinSizeRel"
            if [ -d "$build_dir" ]; then
              echo "=== Contents of $build_dir ==="
              ls -la "$build_dir"/*.a 2>/dev/null || echo "No .a files in $build_dir"
            fi
          done
        fi
        
        # Also copy the libs directory structure for reference
        if [ -d "libs" ]; then
          echo "=== Copying libs directory ==="
          cp -r libs build/Mac/
        fi
    
    - name: Check build results
      if: always()
      run: |
        cd ort-builder
        echo "=== Final Build Results Check ==="
        
        # Show build directory structure
        if [ -d "build" ]; then
          echo "Build directory contents:"
          find build -type f -name "*.a" -exec ls -lh {} \;
        else
          echo "No build directory found"
        fi
        
        # Check for expected outputs
        if [ -f "build/Mac/libonnxruntime_static.a" ]; then
          echo "✅ Universal static library ready"
          echo "Final library size: $(ls -lh build/Mac/libonnxruntime_static.a | awk '{print $5}')"
          lipo -info build/Mac/libonnxruntime_static.a
        else
          echo "❌ Universal static library not found"
          
          # Show what we do have
          echo "=== Available static libraries ==="
          find . -name "*.a" -type f -exec echo "Found: {}" \; -exec ls -lh {} \; 2>/dev/null
        fi
        
        # Check libs directory
        if [ -d "libs" ]; then
          echo "=== Original libs directory structure ==="
          find libs -type f -exec ls -lh {} \;
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ort-builder-artifacts-${{ github.run_number }}
        path: |
          ort-builder/build/Mac/*.a
          ort-builder/build/Mac/libs/**
          ort-builder/libs/**
          ort-builder/model.ort
          ort-builder/model.required_operators_and_types.config
          ort-builder/model_ort.cpp
          ort-builder/model_ort.h
        retention-days: 7
    
    - name: Build Summary
      if: always()
      run: |
        cd ort-builder
        echo "=== ONNX Runtime Builder Complete Summary ==="
        echo ""
        echo "📁 Model Conversion:"
        [ -f "model.ort" ] && echo "  ✅ ORT format: SUCCESS" || echo "  ❌ ORT format: FAILED"
        [ -f "model.required_operators_and_types.config" ] && echo "  ✅ Config file: SUCCESS" || echo "  ❌ Config file: FAILED"
        [ -f "model_ort.cpp" ] && echo "  ✅ C++ serialization: SUCCESS" || echo "  ❌ C++ serialization: FAILED"
        
        echo ""
        echo "🔨 Static Library Build:"
        [ -f "build/Mac/libonnxruntime_static.a" ] && echo "  ✅ Universal Binary: SUCCESS" || echo "  ❌ Universal Binary: FAILED"
        [ -f "libs/macos-arm64_x86_64/libonnxruntime.a" ] && echo "  ✅ Original Universal: SUCCESS" || echo "  ❌ Original Universal: FAILED"
        
        echo ""
        echo "📊 Final File Inventory:"
        echo "Model files:"
        ls -lh model.* 2>/dev/null || echo "  No model files"
        echo "Static libraries:"
        find build libs -name "*.a" -type f -exec ls -lh {} \; 2>/dev/null || echo "  No static libraries found"
